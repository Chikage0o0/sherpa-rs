/*
wget https://github.com/k2-fsa/sherpa-onnx/releases/download/tts-models/matcha-icefall-en_US-ljspeech.tar.bz2
wget https://github.com/k2-fsa/sherpa-onnx/releases/download/vocoder-models/hifigan_v2.onnx
tar xvf matcha-icefall-en_US-ljspeech.tar.bz2
rm matcha-icefall-en_US-ljspeech.tar.bz2

cargo run --example tts_matcha --features="tts"
*/
pub use sherpa_rs::tts::{ MatchaTts, MatchaTtsConfig };

fn main() {
    let config = MatchaTtsConfig {
        acoustic_model: "./matcha-icefall-en_US-ljspeech/model-steps-3.onnx".into(),
        vocoder: "./hifigan_v2.onnx".into(),
        tokens: "./matcha-icefall-en_US-ljspeech/tokens.txt".into(),
        data_dir: "./matcha-icefall-en_US-ljspeech/espeak-ng-data".into(),
        ..Default::default()
    };
    let mut tts = MatchaTts::new(config);
    let sid = 0;
    let audio = tts.create("Hello! This audio generated by onnx model!", sid, 1.0).unwrap();
    sherpa_rs::write_audio_file("audio.wav", &audio.samples, audio.sample_rate).unwrap();
    println!("Created audio.wav")
}
